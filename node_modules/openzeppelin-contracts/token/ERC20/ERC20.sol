// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../../GSN/Context.sol";
import "./IERC20.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin guidelines: functions revert instead
 * of returning `false` on failure. This behavior is nonetheless conventional
 * and does not conflict with the expectations of ERC20 applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
**/
library SafeMath {
  /**
   * @dev Returns the addition of two unsigned integers, reverting on
   * overflow.
   *
   * Counterpart to Solidity's `+` operator.
   *
   * Requirements:
   * - Addition cannot overflow.
   */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  /**
   * @dev Returns the subtraction of two unsigned integers, reverting on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   * - Subtraction cannot overflow.
   */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  /**
   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   * - Subtraction cannot overflow.
   */
  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  /**
   * @dev Returns the multiplication of two unsigned integers, reverting on
   * overflow.
   *
   * Counterpart to Solidity's `*` operator.
   *
   * Requirements:
   * - Multiplication cannot overflow.
   */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");

    return c;
  }

  /**
   * @dev Returns the integer division of two unsigned integers. Reverts on
   * division by zero. The result is rounded towards zero.
   *
   * Counterpart to Solidity's `/` operator. Note: this function uses a
   * `revert` opcode (which leaves remaining gas untouched) while Solidity
   * uses an invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  
  /**
   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
   * division by zero. The result is rounded towards zero.
   *
   * Counterpart to Solidity's `/` operator. Note: this function uses a
   * `revert` opcode (which leaves remaining gas untouched) while Solidity
   * uses an invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0, errorMessage);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }

  /**
   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
   * Reverts when dividing by zero.
   *
   * Counterpart to Solidity's `%` operator. This function uses a `revert`
   * opcode (which leaves remaining gas untouched) while Solidity uses an
   * invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  /**
   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
   * Reverts with custom message when dividing by zero.
   *
   * Counterpart to Solidity's `%` operator. This function uses a `revert`
   * opcode (which leaves remaining gas untouched) while Solidity uses an
   * invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}


contract ERC20 is Context, IERC20 {

   
 using SafeMath for uint256;
        uint256 marketing_development;
        uint256 treasury;
        uint256 float_liquid;
        uint256 liquidity_mining;
        uint256 advisors;
        uint256 team;
        uint256 private_sale;
        uint256 public_sale;
        uint256 ecosystem_fund;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;
    address private admin;

    address[8] public recipients;
    uint public num ;
    uint8 count1;
    uint8 count2;
    uint8 count3;
    uint8 count4;
    uint8 count5;
    uint8 count6;
    uint8 count7;
    uint8 count8;
    uint8 count9;
    

    event Transfers(address indexed tokenowner, address indexed spender, uint token);
    event approval(address indexed from, address indexed _to, uint token);    


  modifier onlyOwner() {
    require(admin == _msgSender(), "Ownable: caller is not the owner");
    _;
  }
    /**
     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with
     * a default value of 18.
     *
     * To select a different value for {decimals}, use {_setupDecimals}.
     *
     * All three of these values are immutable: they can only be set once during
     * construction.
     */
    constructor () {
        _name = "NeklaToken";
        _symbol = "NKL";
        _decimals = 18;
        admin = msg.sender;
        _totalSupply = 160000000;
        _balances[msg.sender] = _totalSupply;

        marketing_development = SafeMath.mul(SafeMath.div(_totalSupply, 100),15);
        treasury = SafeMath.mul(SafeMath.div(_totalSupply, 100),10);
        float_liquid = SafeMath.mul(SafeMath.div(_totalSupply, 100),2);
        liquidity_mining = SafeMath.mul(SafeMath.div(_totalSupply, 100),15);
        advisors = SafeMath.mul(SafeMath.div(_totalSupply, 100),8);
        team = SafeMath.mul(SafeMath.div(_totalSupply, 100),11);
        private_sale = SafeMath.div(SafeMath.mul(_totalSupply,83),1000);
        public_sale = SafeMath.div(SafeMath.mul(_totalSupply,17),1000);
        ecosystem_fund = SafeMath.mul(SafeMath.div(_totalSupply, 100),29);
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is
     * called.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);
        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender] - amount;
        _balances[recipient] = _balances[recipient] + amount;
        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply + amount;
        _balances[account] = _balances[account] + amount;
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account] - amount;
        _totalSupply = _totalSupply - amount;
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
        


    function marketingdevelopment_function(address receiver) onlyOwner external returns(uint256)
    { 
        require(receiver != msg.sender,"wrong address");
        require(_balances[msg.sender] >= marketing_development,"not enough balance");
        recipients[num] = receiver;
        for(uint i = 0; i<= num;i++)
        {
         if(recipients[i] == recipients[num])
         count1++; 
        }
          require(count1 <= 1,"invalid address");
            num++;
           _balances[msg.sender] -= marketing_development;
           _mint(receiver, marketing_development);
        emit Transfers(msg.sender,receiver,marketing_development);
        return _balances[receiver];
    }

    function treasury_function(address receiver) onlyOwner external returns(uint256)
    {
        require(receiver != msg.sender,"wrong address");
        require(_balances[msg.sender] >= treasury,"not enough balance");
        recipients[num] = receiver;   
         for(uint i = 0; i<= num;i++)
        {
         if(recipients[i] == recipients[num])
         count2++;
        }
         require(count2 <= 1,"invalid address");
         num++;
        _balances[msg.sender] -= treasury; 
        _mint(receiver, treasury);
       emit Transfers(msg.sender,receiver,treasury);
       return _balances[receiver];
    }

    function floatliquid_function(address receiver) onlyOwner external returns(uint256)
    {   
        require(receiver != msg.sender,"wrong address");
        require(_balances[msg.sender] >= float_liquid,"not enough balance"); 
        recipients[num] = receiver;
         for(uint i = 0; i<= num;i++)
        {
         if(recipients[i] == recipients[num])
         count3++;
        }
        require(count3 <= 1,"invalid address");
          num++;
         _balances[msg.sender] -= float_liquid; 
        _mint(receiver, float_liquid);  
        emit Transfers(msg.sender,receiver,float_liquid);
        return _balances[receiver];
    }
    
    function liquiditymining_function(address receiver) onlyOwner external returns(uint256)
    {
        require(receiver != msg.sender,"wrong address");
        require(_balances[msg.sender] >= marketing_development,"not enough balance");
        recipients[num] = receiver;
        for(uint i = 0; i<= num;i++)
        {
         if(recipients[i] == recipients[num])
         count4++;
        }
      require(count4 <= 1,"invalid address");
      num++;
       _balances[msg.sender] -= liquidity_mining;  
       _mint(receiver, liquidity_mining);
        emit Transfers(msg.sender,receiver,liquidity_mining);
        return _balances[receiver];
    }

    function advisors_function(address receiver) onlyOwner external returns(uint256)
    {
        require(receiver != msg.sender,"wrong address");
        require(_balances[msg.sender] >= advisors,"not enough balance"); 
        recipients[num] = receiver;
        for(uint i = 0; i<= num;i++)
        {
         if(recipients[i] == recipients[num])
         count5++;
        }
        require(count5 <= 1,"invalid address");
        num++;
        _balances[msg.sender] -= advisors;  
        _mint(receiver, advisors);
        emit Transfers(msg.sender,receiver,advisors);
        return _balances[receiver];
    }

    function team_function(address receiver) onlyOwner external returns(uint256)
    {
        require(receiver != msg.sender,"wrong address");
        require(_balances[msg.sender] >= team,"not enough balance"); 
        recipients[num] = receiver;
        for(uint i = 0; i<= num;i++)
        {
         if(recipients[i] == recipients[num])
         count6++;
        }
        require(count6 <= 1,"invalid address");
         num++;
        _balances[msg.sender] -= team;
        _mint(receiver, team);
        emit Transfers(msg.sender,receiver,team);
        return _balances[receiver];
    }
    function privatesale_function(address receiver) onlyOwner external returns(uint256)
    {
        require(receiver != msg.sender,"wrong address");
        require(_balances[msg.sender] >= private_sale,"not enough balance"); 
        recipients[num] = receiver;
        for(uint i = 0; i<= num;i++)
        {
        if(recipients[i] == recipients[num])
         count7++;
        }
        require(count7 <= 1,"invalid address");
         num++;
        _balances[msg.sender] -= private_sale;
        _mint(receiver, private_sale);  
        emit Transfers(msg.sender,receiver,private_sale);
        return _balances[receiver];
    }

    function publicsale_function(address receiver) onlyOwner external returns(uint256)
    {
        require(receiver != msg.sender,"wrong address");
        require(_balances[msg.sender] >= public_sale,"not enough balance");
        recipients[num] = receiver; 
        for(uint8 i=0; i <= num; i++)
        {
         if(recipients[i] == recipients[num])
         count8++;
        }
        require(count8 <= 1,"invalid address");
         num++;
        _balances[msg.sender] -= public_sale;  
        _mint(receiver, public_sale);
        emit Transfers(msg.sender,receiver,public_sale);
        return _balances[receiver];
    }

    function ecosystemfund_function(address receiver) onlyOwner external returns(uint256)
    {
        require(receiver != msg.sender,"wrong address");
        require(_balances[msg.sender] >= ecosystem_fund,"not enough balance");
        recipients[num] = receiver;
         for(uint i = 0; i<= num;i++)
        {
        if(recipients[i] == recipients[num])
         count9++;
        }
        require(count9 <= 1,"invalid address");
        num++;
        _balances[msg.sender] -= ecosystem_fund;
        _mint(receiver, ecosystem_fund);
        emit Transfers(msg.sender,receiver,ecosystem_fund);
        return _balances[receiver];
    }

    /**
     * @dev Sets {decimals} to a value other than the default one of 18.
     *
     * WARNING: This function should only be called from the constructor. Most
     * applications that interact with token contracts will not expect
     * {decimals} to ever change, and may work incorrectly if it does.
     */
    function _setupDecimals(uint8 decimals_) internal {
        _decimals = decimals_;
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be to transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }
}